{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "da358f82",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#Aim is to build a demos code to check the optimal range of values for the regularization parameter called $\\alpha$\n",
    "#What is a good alpha value when considering regularization\n",
    "\n",
    "import numpy as np\n",
    "#x is the 10x10 matrix\n",
    "x = 1. / (np.arange(1,11) + np.arange(0,10)[:, np.newaxis])\n",
    "\n",
    "y = np.ones(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "131179f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.    , 0.5   , 0.3333, 0.25  , 0.2   , 0.1667, 0.1429, 0.125 , 0.1111, 0.1   ],\n",
       "       [0.5   , 0.3333, 0.25  , 0.2   , 0.1667, 0.1429, 0.125 , 0.1111, 0.1   , 0.0909],\n",
       "       [0.3333, 0.25  , 0.2   , 0.1667, 0.1429, 0.125 , 0.1111, 0.1   , 0.0909, 0.0833],\n",
       "       [0.25  , 0.2   , 0.1667, 0.1429, 0.125 , 0.1111, 0.1   , 0.0909, 0.0833, 0.0769],\n",
       "       [0.2   , 0.1667, 0.1429, 0.125 , 0.1111, 0.1   , 0.0909, 0.0833, 0.0769, 0.0714],\n",
       "       [0.1667, 0.1429, 0.125 , 0.1111, 0.1   , 0.0909, 0.0833, 0.0769, 0.0714, 0.0667],\n",
       "       [0.1429, 0.125 , 0.1111, 0.1   , 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625],\n",
       "       [0.125 , 0.1111, 0.1   , 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588],\n",
       "       [0.1111, 0.1   , 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556],\n",
       "       [0.1   , 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7a489ce4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ba4d9810",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,\n",
       "       0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,\n",
       "       0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,\n",
       "       0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,\n",
       "       0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,\n",
       "       0.0001, 0.0001, 0.0001, 0.0001, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002,\n",
       "       0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002,\n",
       "       0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002,\n",
       "       0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002,\n",
       "       0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002,\n",
       "       0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002,\n",
       "       0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002,\n",
       "       0.0002, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003,\n",
       "       0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003,\n",
       "       0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003,\n",
       "       0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003,\n",
       "       0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004,\n",
       "       0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004,\n",
       "       0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004,\n",
       "       0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0004, 0.0005, 0.0005,\n",
       "       0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005,\n",
       "       0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0005,\n",
       "       0.0005, 0.0005, 0.0005, 0.0005, 0.0005, 0.0006, 0.0006, 0.0006, 0.0006, 0.0006, 0.0006,\n",
       "       0.0006, 0.0006, 0.0006, 0.0006, 0.0006, 0.0006, 0.0006, 0.0006, 0.0006, 0.0006, 0.0006,\n",
       "       0.0006, 0.0006, 0.0006, 0.0006, 0.0006, 0.0006, 0.0006, 0.0007, 0.0007, 0.0007, 0.0007,\n",
       "       0.0007, 0.0007, 0.0007, 0.0007, 0.0007, 0.0007, 0.0007, 0.0007, 0.0007, 0.0007, 0.0007,\n",
       "       0.0007, 0.0007, 0.0007, 0.0007, 0.0007, 0.0007, 0.0008, 0.0008, 0.0008, 0.0008, 0.0008,\n",
       "       0.0008, 0.0008, 0.0008, 0.0008, 0.0008, 0.0008, 0.0008, 0.0008, 0.0008, 0.0008, 0.0008,\n",
       "       0.0008, 0.0008, 0.0009, 0.0009, 0.0009, 0.0009, 0.0009, 0.0009, 0.0009, 0.0009, 0.0009,\n",
       "       0.0009, 0.0009, 0.0009, 0.0009, 0.0009, 0.0009, 0.0009, 0.001 , 0.001 , 0.001 , 0.001 ,\n",
       "       0.001 , 0.001 , 0.001 , 0.001 , 0.001 , 0.001 , 0.001 , 0.001 , 0.001 , 0.001 , 0.001 ,\n",
       "       0.0011, 0.0011, 0.0011, 0.0011, 0.0011, 0.0011, 0.0011, 0.0011, 0.0011, 0.0011, 0.0011,\n",
       "       0.0011, 0.0011, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012, 0.0012,\n",
       "       0.0012, 0.0012, 0.0012, 0.0013, 0.0013, 0.0013, 0.0013, 0.0013, 0.0013, 0.0013, 0.0013,\n",
       "       0.0013, 0.0013, 0.0013, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014,\n",
       "       0.0014, 0.0014, 0.0015, 0.0015, 0.0015, 0.0015, 0.0015, 0.0015, 0.0015, 0.0015, 0.0015,\n",
       "       0.0015, 0.0016, 0.0016, 0.0016, 0.0016, 0.0016, 0.0016, 0.0016, 0.0016, 0.0016, 0.0017,\n",
       "       0.0017, 0.0017, 0.0017, 0.0017, 0.0017, 0.0017, 0.0017, 0.0018, 0.0018, 0.0018, 0.0018,\n",
       "       0.0018, 0.0018, 0.0018, 0.0018, 0.0019, 0.0019, 0.0019, 0.0019, 0.0019, 0.0019, 0.0019,\n",
       "       0.0019, 0.002 , 0.002 , 0.002 , 0.002 , 0.002 , 0.002 , 0.002 , 0.0021, 0.0021, 0.0021,\n",
       "       0.0021, 0.0021, 0.0021, 0.0021, 0.0022, 0.0022, 0.0022, 0.0022, 0.0022, 0.0022, 0.0022,\n",
       "       0.0023, 0.0023, 0.0023, 0.0023, 0.0023, 0.0023, 0.0024, 0.0024, 0.0024, 0.0024, 0.0024,\n",
       "       0.0024, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0026, 0.0026, 0.0026, 0.0026,\n",
       "       0.0026, 0.0027, 0.0027, 0.0027, 0.0027, 0.0027, 0.0027, 0.0028, 0.0028, 0.0028, 0.0028,\n",
       "       0.0028, 0.0029, 0.0029, 0.0029, 0.0029, 0.0029, 0.003 , 0.003 , 0.003 , 0.003 , 0.003 ,\n",
       "       0.0031, 0.0031, 0.0031, 0.0031, 0.0032, 0.0032, 0.0032, 0.0032, 0.0032, 0.0033, 0.0033,\n",
       "       0.0033, 0.0033, 0.0034, 0.0034, 0.0034, 0.0034, 0.0034, 0.0035, 0.0035, 0.0035, 0.0035,\n",
       "       0.0036, 0.0036, 0.0036, 0.0036, 0.0037, 0.0037, 0.0037, 0.0037, 0.0038, 0.0038, 0.0038,\n",
       "       0.0039, 0.0039, 0.0039, 0.0039, 0.004 , 0.004 , 0.004 , 0.004 , 0.0041, 0.0041, 0.0041,\n",
       "       0.0042, 0.0042, 0.0042, 0.0042, 0.0043, 0.0043, 0.0043, 0.0044, 0.0044, 0.0044, 0.0045,\n",
       "       0.0045, 0.0045, 0.0045, 0.0046, 0.0046, 0.0046, 0.0047, 0.0047, 0.0047, 0.0048, 0.0048,\n",
       "       0.0048, 0.0049, 0.0049, 0.0049, 0.005 , 0.005 , 0.005 , 0.0051, 0.0051, 0.0051, 0.0052,\n",
       "       0.0052, 0.0053, 0.0053, 0.0053, 0.0054, 0.0054, 0.0054, 0.0055, 0.0055, 0.0056, 0.0056,\n",
       "       0.0056, 0.0057, 0.0057, 0.0058, 0.0058, 0.0058, 0.0059, 0.0059, 0.006 , 0.006 , 0.006 ,\n",
       "       0.0061, 0.0061, 0.0062, 0.0062, 0.0062, 0.0063, 0.0063, 0.0064, 0.0064, 0.0065, 0.0065,\n",
       "       0.0066, 0.0066, 0.0067, 0.0067, 0.0067, 0.0068, 0.0068, 0.0069, 0.0069, 0.007 , 0.007 ,\n",
       "       0.0071, 0.0071, 0.0072, 0.0072, 0.0073, 0.0073, 0.0074, 0.0074, 0.0075, 0.0075, 0.0076,\n",
       "       0.0076, 0.0077, 0.0077, 0.0078, 0.0079, 0.0079, 0.008 , 0.008 , 0.0081, 0.0081, 0.0082,\n",
       "       0.0082, 0.0083, 0.0084, 0.0084, 0.0085, 0.0085, 0.0086, 0.0086, 0.0087, 0.0088, 0.0088,\n",
       "       0.0089, 0.009 , 0.009 , 0.0091, 0.0091, 0.0092, 0.0093, 0.0093, 0.0094, 0.0095, 0.0095,\n",
       "       0.0096, 0.0097, 0.0097, 0.0098, 0.0099, 0.0099, 0.01  , 0.0101, 0.0101, 0.0102, 0.0103,\n",
       "       0.0104, 0.0104, 0.0105, 0.0106, 0.0106, 0.0107, 0.0108, 0.0109, 0.0109, 0.011 , 0.0111,\n",
       "       0.0112, 0.0112, 0.0113, 0.0114, 0.0115, 0.0116, 0.0116, 0.0117, 0.0118, 0.0119, 0.012 ,\n",
       "       0.0121, 0.0121, 0.0122, 0.0123, 0.0124, 0.0125, 0.0126, 0.0127, 0.0127, 0.0128, 0.0129,\n",
       "       0.013 , 0.0131, 0.0132, 0.0133, 0.0134, 0.0135, 0.0136, 0.0137, 0.0137, 0.0138, 0.0139,\n",
       "       0.014 , 0.0141, 0.0142, 0.0143, 0.0144, 0.0145, 0.0146, 0.0147, 0.0148, 0.0149, 0.015 ,\n",
       "       0.0151, 0.0152, 0.0154, 0.0155, 0.0156, 0.0157, 0.0158, 0.0159, 0.016 , 0.0161, 0.0162,\n",
       "       0.0163, 0.0165, 0.0166, 0.0167, 0.0168, 0.0169, 0.017 , 0.0171, 0.0173, 0.0174, 0.0175,\n",
       "       0.0176, 0.0178, 0.0179, 0.018 , 0.0181, 0.0182, 0.0184, 0.0185, 0.0186, 0.0188, 0.0189,\n",
       "       0.019 , 0.0192, 0.0193, 0.0194, 0.0196, 0.0197, 0.0198, 0.02  , 0.0201, 0.0202, 0.0204,\n",
       "       0.0205, 0.0207, 0.0208, 0.021 , 0.0211, 0.0212, 0.0214, 0.0215, 0.0217, 0.0218, 0.022 ,\n",
       "       0.0221, 0.0223, 0.0225, 0.0226, 0.0228, 0.0229, 0.0231, 0.0232, 0.0234, 0.0236, 0.0237,\n",
       "       0.0239, 0.0241, 0.0242, 0.0244, 0.0246, 0.0247, 0.0249, 0.0251, 0.0253, 0.0254, 0.0256,\n",
       "       0.0258, 0.026 , 0.0261, 0.0263, 0.0265, 0.0267, 0.0269, 0.0271, 0.0273, 0.0274, 0.0276,\n",
       "       0.0278, 0.028 , 0.0282, 0.0284, 0.0286, 0.0288, 0.029 , 0.0292, 0.0294, 0.0296, 0.0298,\n",
       "       0.03  , 0.0302, 0.0304, 0.0307, 0.0309, 0.0311, 0.0313, 0.0315, 0.0317, 0.032 , 0.0322,\n",
       "       0.0324, 0.0326, 0.0328, 0.0331, 0.0333, 0.0335, 0.0338, 0.034 , 0.0342, 0.0345, 0.0347,\n",
       "       0.035 , 0.0352, 0.0354, 0.0357, 0.0359, 0.0362, 0.0364, 0.0367, 0.0369, 0.0372, 0.0375,\n",
       "       0.0377, 0.038 , 0.0382, 0.0385, 0.0388, 0.039 , 0.0393, 0.0396, 0.0399, 0.0401, 0.0404,\n",
       "       0.0407, 0.041 , 0.0413, 0.0416, 0.0418, 0.0421, 0.0424, 0.0427, 0.043 , 0.0433, 0.0436,\n",
       "       0.0439, 0.0442, 0.0445, 0.0448, 0.0451, 0.0455, 0.0458, 0.0461, 0.0464, 0.0467, 0.0471,\n",
       "       0.0474, 0.0477, 0.048 , 0.0484, 0.0487, 0.0491, 0.0494, 0.0497, 0.0501, 0.0504, 0.0508,\n",
       "       0.0511, 0.0515, 0.0518, 0.0522, 0.0526, 0.0529, 0.0533, 0.0537, 0.054 , 0.0544, 0.0548,\n",
       "       0.0552, 0.0556, 0.0559, 0.0563, 0.0567, 0.0571, 0.0575, 0.0579, 0.0583, 0.0587, 0.0591,\n",
       "       0.0595, 0.0599, 0.0604, 0.0608, 0.0612, 0.0616, 0.0621, 0.0625, 0.0629, 0.0634, 0.0638,\n",
       "       0.0642, 0.0647, 0.0651, 0.0656, 0.066 , 0.0665, 0.067 , 0.0674, 0.0679, 0.0684, 0.0688,\n",
       "       0.0693, 0.0698, 0.0703, 0.0708, 0.0713, 0.0718, 0.0723, 0.0728, 0.0733, 0.0738, 0.0743,\n",
       "       0.0748, 0.0753, 0.0758, 0.0764, 0.0769, 0.0774, 0.078 , 0.0785, 0.079 , 0.0796, 0.0802,\n",
       "       0.0807, 0.0813, 0.0818, 0.0824, 0.083 , 0.0835, 0.0841, 0.0847, 0.0853, 0.0859, 0.0865,\n",
       "       0.0871, 0.0877, 0.0883, 0.0889, 0.0895, 0.0901, 0.0908, 0.0914, 0.092 , 0.0927, 0.0933,\n",
       "       0.094 , 0.0946, 0.0953, 0.0959, 0.0966, 0.0973, 0.0979, 0.0986, 0.0993, 0.1   ])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get various values of alpha\n",
    "n_alphas = 1000\n",
    "alphas = np.logspace(-4, -1, n_alphas)\n",
    "alphas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9aa3ae5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0cde05b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Array for storing the regression coeff through ridge model\n",
    "coefs = []\n",
    "\n",
    "for a in alphas:\n",
    "        \n",
    "            ridge = linear_model.Ridge(alpha=a, fit_intercept=False)#This is equal to false since in our data we don't have 1,1,1,1,1.\n",
    "            \n",
    "            ridge.fit(x,y)\n",
    "            \n",
    "            coefs.append(ridge.coef_) #This will have 10 coefficents(columns) and alphas (10 rows)\n",
    "            \n",
    "            #When we fit ridge model, we will get the coefficients, and we can save them in an array coefs.append(ridge.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ee5133f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Display results \n",
    "\n",
    "plt.figure(figsize=(14,5))\n",
    "plt.grid()\n",
    "\n",
    "ax = plt.gca()\n",
    "\n",
    "ax.plot(alphas, coefs)\n",
    "\n",
    "ax.set_xscale('log')\n",
    "ax.set_xlim(ax.get_xlim()[::-1]) #reverse axis\n",
    "\n",
    "plt.xlabel('alpha')\n",
    "plt.ylabel('weights')\n",
    "\n",
    "plt.title('Ridge coefficients');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "420ca6b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#The plot is saying alpha is very high -> this means coefficients will be near 0.\n",
    "#10 to the 7 is at either end of the chart. We need to find an optimize model.\n",
    "#What we need to do is to look between 10 to the power of -1 and -4.\n",
    "\n",
    "#We can change np.logspace (-4,-1) to zoom in further.\n",
    "#We can try (-2,-3) - we need exact value of alpha for best performance of the model.\n",
    "#It is very scattered at 10 to the -4, we need to smooth it.\n",
    "#Now run grid search and pass the parameter from (-2,-3) ->smooth model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7e47dd18",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.241e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.234e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.228e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.221e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.214e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.207e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.200e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.192e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.185e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.177e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.170e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.162e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.153e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.089e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.051e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.019e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.989e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.961e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.935e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.911e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.889e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.868e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.848e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.830e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.813e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.797e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.783e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.769e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.756e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.744e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.733e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.722e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.712e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.703e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.694e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.686e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.679e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.671e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.665e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.658e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.652e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.647e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.641e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.636e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.632e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.627e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.623e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.618e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.614e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.611e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.607e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.603e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.600e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.597e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.594e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.590e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.587e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.584e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.581e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.579e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.576e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.573e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.570e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.567e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.565e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.562e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.559e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.556e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.553e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.550e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.548e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.545e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.542e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.539e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.536e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.533e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.529e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.526e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.523e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.520e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.516e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.513e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.509e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.506e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.502e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.498e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.494e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.490e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.486e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.482e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.478e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.473e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.469e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.464e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.460e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.455e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.450e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.445e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.440e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.434e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.429e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.424e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.418e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.412e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.406e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.400e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.394e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.387e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.381e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.374e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.367e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.360e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.353e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.346e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.339e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.331e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.323e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.315e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.307e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.299e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.290e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.281e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.272e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.263e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.254e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.245e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.235e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.225e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.215e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.205e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.194e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.183e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.172e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.161e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.150e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.138e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.126e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.114e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.101e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.089e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.076e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.063e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.049e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.035e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.021e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n",
      "C:\\Users\\19144\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.007e-03, tolerance: 1.000e-03\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    }
   ],
   "source": [
    "#Array for storing the regression coeff through lasso model\n",
    "coefs = []\n",
    "\n",
    "for a in alphas:\n",
    "        \n",
    "            ridge = linear_model.Lasso(alpha=a, fit_intercept=False,\n",
    "                                      max_iter=5000)#This is equal to false since in our data we don't have 1,1,1,1,1.\n",
    "            \n",
    "            ridge.fit(x,y)\n",
    "            \n",
    "            coefs.append(ridge.coef_) #This will have 10 coefficents(columns) and alphas (10 rows)\n",
    "            \n",
    "            #When we fit ridge model, we will get the coefficients, and we can save them in an array coefs.append(ridge.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1ee9ee6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Display results \n",
    "\n",
    "plt.figure(figsize=(14,5))\n",
    "plt.grid()\n",
    "\n",
    "ax = plt.gca()\n",
    "\n",
    "ax.plot(alphas, coefs)\n",
    "\n",
    "ax.set_xscale('log')\n",
    "ax.set_xlim(ax.get_xlim()[::-1]) #reverse axis\n",
    "\n",
    "plt.xlabel('alpha')\n",
    "plt.ylabel('weights')\n",
    "\n",
    "plt.title('Lasso coefficients');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dca1b92f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Most values are 0 here, we need to optimize here."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
